# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# 概述：
# 该 pyproject.toml 文件用于管理 Ultralytics 库的构建、打包和分发。
# 它定义了项目的基本元数据、依赖项和用于开发和部署库的设置。

# 关键部分：
# - [build-system]: 指定构建要求和后端（例如 setuptools, wheel）。
# - [project]: 包含项目的名称、版本、描述、作者、依赖项等详细信息。
# - [project.optional-dependencies]: 提供额外的可选软件包，用于扩展功能。
# - [tool.*]: 配置项目中使用的各种工具（如 pytest, yapf 等）的设置。

# 安装：
# 可以使用以下命令安装 Ultralytics 库：'pip install ultralytics'
# 如果是开发用途，可以使用以下命令以可编辑模式安装包：'pip install -e .'
# 这种方式允许实时修改代码，无需重新安装。

# 文档：
# 有关详细的文档和使用说明，请访问：https://docs.ultralytics.com

[build-system]
requires = ["setuptools>=70.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# 项目设置 -----------------------------------------------------------------------------------------------------
[project]
name = "ultralytics"
dynamic = ["version"]
description = "Ultralytics YOLO 🚀 用于 SOTA 对象检测、多对象跟踪、实例分割、姿势估计和图像分类。"
readme = "README.md"
requires-python = ">=3.8"
license = { "text" = "AGPL-3.0" }
keywords = ["machine-learning", "deep-learning", "computer-vision", "ML", "DL", "AI", "YOLO", "YOLOv3", "YOLOv5", "YOLOv8", "YOLOv9", "YOLOv10", "YOLO11", "HUB", "Ultralytics"]
authors = [
    { name = "Glenn Jocher", email = "glenn.jocher@ultralytics.com" },
    { name = "Jing Qiu", email = "jing.qiu@ultralytics.com" },
]
maintainers = [
    { name = "Ultralytics", email = "hello@ultralytics.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
]

# 所需依赖 ------------------------------------------------------------------------------------------------
dependencies = [
    "numpy>=1.23.0",
    "numpy<2.0.0; sys_platform == 'darwin'", # macOS OpenVINO 错误 https://github.com/ultralytics/ultralytics/pull/17221
    "matplotlib>=3.3.0",
    "opencv-python>=4.6.0",
    "pillow>=7.1.2",
    "pyyaml>=5.3.1",
    "requests>=2.23.0",
    "scipy>=1.4.1",
    "torch>=1.8.0",
    "torch>=1.8.0,!=2.4.0; sys_platform == 'win32'", # Windows CPU 错误 w/ 2.4.0 https://github.com/ultralytics/ultralytics/issues/15049
    "torchvision>=0.9.0",
    "tqdm>=4.64.0", # 进度条
    "psutil", # 系统资源使用情况
    "py-cpuinfo", # 显示 CPU 信息
    "pandas>=1.1.4",
    "seaborn>=0.11.0", # 绘图
    "ultralytics-thop>=2.0.0", # FLOPs 计算 https://github.com/ultralytics/thop
]

# 可选依赖 ------------------------------------------------------------------------------------------------
[project.optional-dependencies]
dev = [
    "ipython",
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.9",
    "mkdocstrings[python]",
    "mkdocs-redirects", # 301 重定向
    "mkdocs-ultralytics-plugin>=0.1.8", # 用于元描述和图片、日期及作者
    "mkdocs-macros-plugin>=1.0.5"  # 在多个地方复制内容（即导出表格）
]
export = [
    "onnx>=1.12.0", # ONNX 导出
    "coremltools>=7.0; platform_system != 'Windows' and python_version <= '3.11'", # CoreML 支持在 macOS 和 Linux 上
    "scikit-learn>=1.3.2; platform_system != 'Windows' and python_version <= '3.11'", # CoreML k-means 量化
    "openvino>=2024.0.0", # OpenVINO 导出
    "tensorflow>=2.0.0", # TF bug https://github.com/ultralytics/ultralytics/issues/5161
    "tensorflowjs>=3.9.0", # TF.js 导出，自动安装 tensorflow
    "tensorstore>=0.1.63; platform_machine == 'aarch64' and python_version >= '3.9'", # 用于 TF 树莓派导出
    "keras", # tensorflow>=2.16 不自动安装
    "flatbuffers>=23.5.26,<100; platform_machine == 'aarch64'", # 更新旧版 'flatbuffers'，已包含在 tensorflow 包内
    "numpy==1.23.5; platform_machine == 'aarch64'", # 修复错误：`np.bool` 已废弃为内建 `bool`，在 NVIDIA Jetson 上使用 TensorRT 模型时
    "h5py!=3.11.0; platform_machine == 'aarch64'", # 修复由于 3.11 版本发布时缺少 aarch64 wheels 导致的 h5py 构建问题
]
solutions = [
    "shapely>=2.0.0",    # 用于点和多边形数据匹配的 shapely
    "streamlit",    # 用于浏览器上的实时推理，例如 `yolo streamlit-predict`
]
logging = [
    "comet", # https://docs.ultralytics.com/integrations/comet/
    "tensorboard>=2.13.0",
    "dvclive>=2.12.0",
]
extra = [
    "hub-sdk>=0.0.12", # Ultralytics HUB
    "ipython", # 交互式笔记本
    "albumentations>=1.4.6", # 训练数据增强
    "pycocotools>=2.0.7", # COCO mAP
]

[project.urls]
"Homepage" = "https://ultralytics.com"
"Source" = "https://github.com/ultralytics/ultralytics"
"Documentation" = "https://docs.ultralytics.com"
"Bug Reports" = "https://github.com/ultralytics/ultralytics/issues"
"Changelog" = "https://github.com/ultralytics/ultralytics/releases"

[project.scripts]
yolo = "ultralytics.cfg:entrypoint"
ultralytics = "ultralytics.cfg:entrypoint"

# 工具设置 -------------------------------------------------------------------------------------------------------
[tool.setuptools]  # 针对 `setuptools` 构建后端的配置。
packages = { find = { where = ["."], include = ["ultralytics", "ultralytics.*"] } }
package-data = { "ultralytics" = ["**/*.yaml", "../tests/*.py"], "ultralytics.assets" = ["*.jpg"] }

[tool.setuptools.dynamic]
version = { attr = "ultralytics.__version__" }

[tool.pytest.ini_options]
addopts = "--doctest-modules --durations=30 --color=yes"
markers = [
    "slow: skip slow tests unless --slow is set",
]
norecursedirs = [".git", "dist", "build"]

[tool.coverage.run]
source = ["ultralytics/"]
data_file = "tests/.coverage"
omit = ["ultralytics/utils/callbacks/*"]

[tool.isort]
line_length = 120
multi_line_output = 0

[tool.yapf]
based_on_style = "pep8"
spaces_before_comment = 2
column_limit = 120
coalesce_brackets = true
spaces_around_power_operator = true
space_between_ending_comma_and_closing_bracket = true
split_before_closing_bracket = false
split_before_first_argument = false

[tool.ruff]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.docformatter]
wrap-summaries = 120
wrap-descriptions = 120
pre-summary-newline = true
close-quotes-on-newline = true
in-place = true

[tool.codespell]
ignore-words-list = "crate,nd,ned,strack,dota,ane,segway,fo,gool,winn,commend,bloc,nam,afterall"
skip = '*.pt,*.pth,*.torchscript,*.onnx,*.tflite,*.pb,*.bin,*.param,*.mlmodel,*.engine,*.npy,*.data*,*.csv,*pnnx*,*venv*,*translat*,__pycache__*,*.ico,*.jpg,*.png,*.mp4,*.mov,/runs,/.git,./docs/??/*.md,./docs/mkdocs_??.yml'
